<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  MuleSoft Training - Anypoint Platform Development: Level 2
  %%
  Copyright (C) 2019 - 2021 MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
  %%
  The software in this package is published under the terms of the
  Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License,
  a copy of which has been included with this distribution in the LICENSE.txt file.
  #L%
  -->
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:api-gateway="http://www.mulesoft.org/schema/mule/api-gateway" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:secure-properties="http://www.mulesoft.org/schema/mule/secure-properties" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd  http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd   http://www.mulesoft.org/schema/mule/secure-properties http://www.mulesoft.org/schema/mule/secure-properties/current/mule-secure-properties.xsd  http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd  http://www.mulesoft.org/schema/mule/api-gateway http://www.mulesoft.org/schema/mule/api-gateway/current/mule-api-gateway.xsd    http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd  http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd  http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
  <flow name="check-in-by-pnr">
    <logger level="INFO" message="#['Checking-in by PNR: ' ++ (vars.PNR default '')]" doc:name="START"/>
    <ee:transform doc:name="To checkIn SOAP payload">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/xml
          ns ns0 http://flightsMgmt.sword.com/
          ---
          {
              ns0#checkIn: {
                  pnr: vars.PNR,
                  passengerLastName: payload.lastName,
                  numOfBags: payload.numBags
              }
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Before calling checkIn SOAP WS" doc:name="Before WS"/>
    <try>
      <flow-ref name="flights-wsc-check-in" doc:name="flights-wsc-check-in"/>
      <error-handler>
        <on-error-continue>
          <raise-error type="APP:CANT_CHECKIN" doc:name="Raise APP:CANT_CHECKIN error"/>
        </on-error-continue>
      </error-handler>
    </try>
    <logger level="INFO" message="After receiving checkIn SOAP WS response" doc:name="After WS"/>
    <set-payload value="#[output application/java --- payload.body.checkInResponse.return as Boolean]" doc:name="Check-in response"/>
    <logger level="INFO" message="Checked-in by PNR" doc:name="END"/>
  </flow>
  <sub-flow name="flights-wsc-check-in">
    <wsc:consume operation="checkIn" config-ref="flightsWSCConfig" doc:name="CheckIn SOAP WS"/>
  </sub-flow>
  <flow name="get-ticket-by-pnr">
    <logger level="INFO" message="Getting ticket by PNR" doc:name="START"/>
    <ee:transform doc:name="To getTicketByPNR SOAP payload">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/xml
          ns ns0 http://flightsMgmt.sword.com/
          ---
          {
              ns0#getTicketByPNR: {
                  pnr: vars.PNR
              }
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Before calling getTicketByPNR SOAP WS" doc:name="Before WS"/>
    <try>
      <flow-ref name="flights-wsc-get-ticket-by-pnr" doc:name="flights-wsc-get-ticket-by-pnr"/>
      <error-handler>
        <on-error-continue>
          <raise-error type="APP:CANT_GET_TICKET" doc:name="Raise APP:CANT_GET_TICKET error"/>
        </on-error-continue>
      </error-handler>
    </try>
    <logger level="INFO" message="After receiving getTicketByPNR SOAP WS response" doc:name="After WS"/>
    <ee:transform doc:name="To Ticket JSON response">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/json
          // hack to convert UTC times sent by FMS into local times in the origin TZ
          var TZLookup = {
            "SFO": "America/Los_Angeles",
            "LAX": "America/Los_Angeles",
            "ATL": "America/New_York",
            "VIE": "Europe/Vienna"
            // ...
          }
          var r = payload.body.getTicketByPNRResponse.return
          
          var flightDTdepart   = (r.flightDate ++ "T" ++ r.depart  ) as DateTime
          var flightDTboarding = (r.flightDate ++ "T" ++ r.boarding) as DateTime
          
          var flightDTdepartLocal   = flightDTdepart   >> TZLookup[r.origin]
          var flightDTboardingLocal = flightDTboarding >> TZLookup[r.origin]
          
          var dateLocal     = flightDTdepartLocal   as String {format: "YYYY-MM-dd"}
          var departLocal   = flightDTdepartLocal   as String {format: "hh:mm:ss"}
          var boardingLocal = flightDTboardingLocal as String {format: "hh:mm:ss"}
          ---
          {
            ticketHolderLastName:   r.ticketHolderLastName,
            ticketHolderPassPortNo: r.ticketHolderPassportNo,
            origin:                 r.origin,
            destination:            r.destination,
            flightDate:             dateLocal,
            flightNo:               r.flightNo,
            boarding:               boardingLocal,
            class:                  r.class,
            depart:                 departLocal,
            gate:                   r.gate,
            seat:                   r.seat
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Got ticket by PNR" doc:name="END"/>
  </flow>
  <sub-flow name="flights-wsc-get-ticket-by-pnr">
    <wsc:consume operation="getTicketByPNR" config-ref="flightsWSCConfig" doc:name="getTicketByPNR SOAP WS"/>
  </sub-flow>
  <flow name="register-callback">
    <scheduler doc:name="Just once after startup">
      <scheduling-strategy>
        <fixed-frequency frequency="365000" timeUnit="DAYS"/>
      </scheduling-strategy>
    </scheduler>
    <logger level="INFO" message="Start" doc:name="Start"/>
    <ee:transform doc:name="To registerForCancellationNotifications SOAP payload">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/xml
          ns ns0 http://flightsMgmt.sword.com/
          ---
          {
              ns0#registerForCancellationNotifications: {
                  callbackURL: p("api.callback.url")
              }
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Before calling registerForCancellationNotifications SOAP WS" doc:name="Before WS"/>
    <try>
      <flow-ref name="register-for-cancellation-notifications" doc:name="register-for-cancellation-notifications"/>
      <error-handler>
        <on-error-continue>
          <raise-error type="APP:CANT_REGISTER_CALLBACK" doc:name="Raise APP:CANT_REGISTER_CALLBACK error"/>
        </on-error-continue>
      </error-handler>
    </try>
    <logger level="INFO" message="After receiving registerForCancellationNotifications SOAP WS response, End" doc:name="After WS, END"/>
  </flow>
  <sub-flow name="register-for-cancellation-notifications">
    <wsc:consume operation="registerForCancellationNotifications" config-ref="flightsWSCConfig" doc:name="registerForCancellationNotifications"/>
  </sub-flow>
  <flow name="receive-cancellation-notification">
    <http:listener path="${api.callback.path}" allowedMethods="POST" config-ref="apiHttpListenerConfig" doc:name="HTTP: Cancellation Notifs">
      <http:response statusCode="#[vars.httpStatus default 202]">
        <http:body>#[output text/plain --- vars.response default 'OK']</http:body>
      </http:response>
    </http:listener>
    <logger level="INFO" message="Before VM publish to ${vm.cancelNotif.q.name}" doc:name="Start, Before VM"/>
    <vm:publish queueName="${vm.cancelNotif.q.name}" sendCorrelationId="ALWAYS" timeout="${vm.timeoutMillis}" timeoutUnit="MILLISECONDS" config-ref="vmConfig" doc:name="To Cancellation Notif VM queue"/>
    <logger level="INFO" message="After VM publish to ${vm.cancelNotif.q.name}, End" doc:name="After VM, End"/>
  </flow>
  <flow name="deliver-flight-cancelled-event">
    <vm:listener queueName="${vm.cancelNotif.q.name}" transactionalAction="ALWAYS_BEGIN" config-ref="vmConfig" doc:name="VM: Cancellation Notifs">
      <redelivery-policy maxRedeliveryCount="${vm.maxRedeliveryCount}" idExpression="#[correlationId]"/>
      <reconnect-forever frequency="${vm.reconnectIntervalMillis}"/>
    </vm:listener>
    <try transactionalAction="BEGIN_OR_JOIN">
      <logger level="INFO" message="Start, Received from VM queue ${vm.cancelNotif.q.name}, Before transform to Flight Cancelled Event" doc:name="Start, received, before transform"/>
      <set-variable variableName="originalPayload" value="#[payload]" doc:name="Orig payload"/>
      <ee:transform doc:name="To Flight Cancelled Event">
        <ee:message>
          <ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
              pnr:                 payload.CancellationNotification.PNR,
              lastNameOfPassenger: payload.CancellationNotification.PassengerLastName
            }]]></ee:set-payload>
        </ee:message>
      </ee:transform>
      <!-- TODO: validate -->
      <logger doc:name="TODO: validate"/>
      <set-variable variableName="msgValid" value="#[true]" doc:name="msgValid"/>
      <error-handler>
        <on-error-continue enableNotifications="false" logException="false">
          <set-variable variableName="msgValid" value="#[false]" doc:name="msgValid"/>
          <logger level="ERROR" message="Can't create valid Flight Cancelled Event - giving up - sending to ${vm.cancelNotif.dlq.name}" doc:name="Can't create Flight Cancelled Event"/>
          <flow-ref name="send-to-vm-dlq" doc:name="send-to-vm-dlq"/>
        </on-error-continue>
      </error-handler>
    </try>
    <choice>
      <when expression="#[vars.msgValid]">
        <logger level="INFO" message="Before publishing Flight Cancelled Event to Anypoint MQ Exchange" doc:name="Before publish to Anypoint MQ"/>
        <anypoint-mq:publish destination="${anypoint.mq.exchange}" messageId="#[correlationId]" config-ref="amqConfig" doc:name="To Anypoint MQ"/>
        <logger level="INFO" message="Finished publishing Flight Cancelled Event to Anypoint MQ Exchange, End" doc:name="After publish to Anypoint MQ, End"/>
      </when>
    </choice>
    <error-handler>
      <on-error-continue type="REDELIVERY_EXHAUSTED" enableNotifications="false" logException="false">
        <logger level="ERROR" message="Can't deliver Flight Cancelled Event - giving up - sending to ${vm.cancelNotif.dlq.name}" doc:name="Can't deliver"/>
        <flow-ref name="send-to-vm-dlq" doc:name="send-to-vm-dlq"/>
      </on-error-continue>
    </error-handler>
  </flow>
  <sub-flow name="send-to-vm-dlq">
    <vm:publish queueName="${vm.cancelNotif.dlq.name}" timeout="${vm.timeoutMillis}" timeoutUnit="MILLISECONDS" config-ref="vmConfig" doc:name="VM: DLQ"/>
  </sub-flow>
  <flow name="handle-dlq">
    <vm:listener queueName="${vm.cancelNotif.dlq.name}" config-ref="vmConfig" doc:name="VM: DLQ">
      <redelivery-policy maxRedeliveryCount="${vm.maxRedeliveryCount}" idExpression="#[correlationId]"/>
      <reconnect-forever frequency="${vm.reconnectIntervalMillis}"/>
    </vm:listener>
    <logger level="INFO" message="Processing message from DLQ" doc:name="Processing"/>
  </flow>
</mule>
